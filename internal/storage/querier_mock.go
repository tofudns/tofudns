// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tofudns/tofudns/internal/storage (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -destination=querier_mock.go -typed=true -package=storage . Querier
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateRecord mocks base method.
func (m *MockQuerier) CreateRecord(ctx context.Context, arg CreateRecordParams) (CorednsRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", ctx, arg)
	ret0, _ := ret[0].(CorednsRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockQuerierMockRecorder) CreateRecord(ctx, arg any) *MockQuerierCreateRecordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockQuerier)(nil).CreateRecord), ctx, arg)
	return &MockQuerierCreateRecordCall{Call: call}
}

// MockQuerierCreateRecordCall wrap *gomock.Call
type MockQuerierCreateRecordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierCreateRecordCall) Return(arg0 CorednsRecord, arg1 error) *MockQuerierCreateRecordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierCreateRecordCall) Do(f func(context.Context, CreateRecordParams) (CorednsRecord, error)) *MockQuerierCreateRecordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierCreateRecordCall) DoAndReturn(f func(context.Context, CreateRecordParams) (CorednsRecord, error)) *MockQuerierCreateRecordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteRecord mocks base method.
func (m *MockQuerier) DeleteRecord(ctx context.Context, arg DeleteRecordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockQuerierMockRecorder) DeleteRecord(ctx, arg any) *MockQuerierDeleteRecordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockQuerier)(nil).DeleteRecord), ctx, arg)
	return &MockQuerierDeleteRecordCall{Call: call}
}

// MockQuerierDeleteRecordCall wrap *gomock.Call
type MockQuerierDeleteRecordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierDeleteRecordCall) Return(arg0 error) *MockQuerierDeleteRecordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierDeleteRecordCall) Do(f func(context.Context, DeleteRecordParams) error) *MockQuerierDeleteRecordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierDeleteRecordCall) DoAndReturn(f func(context.Context, DeleteRecordParams) error) *MockQuerierDeleteRecordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRecordByID mocks base method.
func (m *MockQuerier) GetRecordByID(ctx context.Context, arg GetRecordByIDParams) (CorednsRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordByID", ctx, arg)
	ret0, _ := ret[0].(CorednsRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordByID indicates an expected call of GetRecordByID.
func (mr *MockQuerierMockRecorder) GetRecordByID(ctx, arg any) *MockQuerierGetRecordByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordByID", reflect.TypeOf((*MockQuerier)(nil).GetRecordByID), ctx, arg)
	return &MockQuerierGetRecordByIDCall{Call: call}
}

// MockQuerierGetRecordByIDCall wrap *gomock.Call
type MockQuerierGetRecordByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierGetRecordByIDCall) Return(arg0 CorednsRecord, arg1 error) *MockQuerierGetRecordByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierGetRecordByIDCall) Do(f func(context.Context, GetRecordByIDParams) (CorednsRecord, error)) *MockQuerierGetRecordByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierGetRecordByIDCall) DoAndReturn(f func(context.Context, GetRecordByIDParams) (CorednsRecord, error)) *MockQuerierGetRecordByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRecords mocks base method.
func (m *MockQuerier) ListRecords(ctx context.Context, zone string) ([]CorednsRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecords", ctx, zone)
	ret0, _ := ret[0].([]CorednsRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockQuerierMockRecorder) ListRecords(ctx, zone any) *MockQuerierListRecordsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockQuerier)(nil).ListRecords), ctx, zone)
	return &MockQuerierListRecordsCall{Call: call}
}

// MockQuerierListRecordsCall wrap *gomock.Call
type MockQuerierListRecordsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierListRecordsCall) Return(arg0 []CorednsRecord, arg1 error) *MockQuerierListRecordsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierListRecordsCall) Do(f func(context.Context, string) ([]CorednsRecord, error)) *MockQuerierListRecordsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierListRecordsCall) DoAndReturn(f func(context.Context, string) ([]CorednsRecord, error)) *MockQuerierListRecordsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRecordsByName mocks base method.
func (m *MockQuerier) ListRecordsByName(ctx context.Context, arg ListRecordsByNameParams) ([]CorednsRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecordsByName", ctx, arg)
	ret0, _ := ret[0].([]CorednsRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecordsByName indicates an expected call of ListRecordsByName.
func (mr *MockQuerierMockRecorder) ListRecordsByName(ctx, arg any) *MockQuerierListRecordsByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordsByName", reflect.TypeOf((*MockQuerier)(nil).ListRecordsByName), ctx, arg)
	return &MockQuerierListRecordsByNameCall{Call: call}
}

// MockQuerierListRecordsByNameCall wrap *gomock.Call
type MockQuerierListRecordsByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierListRecordsByNameCall) Return(arg0 []CorednsRecord, arg1 error) *MockQuerierListRecordsByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierListRecordsByNameCall) Do(f func(context.Context, ListRecordsByNameParams) ([]CorednsRecord, error)) *MockQuerierListRecordsByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierListRecordsByNameCall) DoAndReturn(f func(context.Context, ListRecordsByNameParams) ([]CorednsRecord, error)) *MockQuerierListRecordsByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRecordsByType mocks base method.
func (m *MockQuerier) ListRecordsByType(ctx context.Context, arg ListRecordsByTypeParams) ([]CorednsRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecordsByType", ctx, arg)
	ret0, _ := ret[0].([]CorednsRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecordsByType indicates an expected call of ListRecordsByType.
func (mr *MockQuerierMockRecorder) ListRecordsByType(ctx, arg any) *MockQuerierListRecordsByTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordsByType", reflect.TypeOf((*MockQuerier)(nil).ListRecordsByType), ctx, arg)
	return &MockQuerierListRecordsByTypeCall{Call: call}
}

// MockQuerierListRecordsByTypeCall wrap *gomock.Call
type MockQuerierListRecordsByTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierListRecordsByTypeCall) Return(arg0 []CorednsRecord, arg1 error) *MockQuerierListRecordsByTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierListRecordsByTypeCall) Do(f func(context.Context, ListRecordsByTypeParams) ([]CorednsRecord, error)) *MockQuerierListRecordsByTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierListRecordsByTypeCall) DoAndReturn(f func(context.Context, ListRecordsByTypeParams) ([]CorednsRecord, error)) *MockQuerierListRecordsByTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListRecordsByZone mocks base method.
func (m *MockQuerier) ListRecordsByZone(ctx context.Context, zone string) ([]CorednsRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecordsByZone", ctx, zone)
	ret0, _ := ret[0].([]CorednsRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecordsByZone indicates an expected call of ListRecordsByZone.
func (mr *MockQuerierMockRecorder) ListRecordsByZone(ctx, zone any) *MockQuerierListRecordsByZoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecordsByZone", reflect.TypeOf((*MockQuerier)(nil).ListRecordsByZone), ctx, zone)
	return &MockQuerierListRecordsByZoneCall{Call: call}
}

// MockQuerierListRecordsByZoneCall wrap *gomock.Call
type MockQuerierListRecordsByZoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierListRecordsByZoneCall) Return(arg0 []CorednsRecord, arg1 error) *MockQuerierListRecordsByZoneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierListRecordsByZoneCall) Do(f func(context.Context, string) ([]CorednsRecord, error)) *MockQuerierListRecordsByZoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierListRecordsByZoneCall) DoAndReturn(f func(context.Context, string) ([]CorednsRecord, error)) *MockQuerierListRecordsByZoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListZones mocks base method.
func (m *MockQuerier) ListZones(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListZones", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListZones indicates an expected call of ListZones.
func (mr *MockQuerierMockRecorder) ListZones(ctx any) *MockQuerierListZonesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListZones", reflect.TypeOf((*MockQuerier)(nil).ListZones), ctx)
	return &MockQuerierListZonesCall{Call: call}
}

// MockQuerierListZonesCall wrap *gomock.Call
type MockQuerierListZonesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierListZonesCall) Return(arg0 []string, arg1 error) *MockQuerierListZonesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierListZonesCall) Do(f func(context.Context) ([]string, error)) *MockQuerierListZonesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierListZonesCall) DoAndReturn(f func(context.Context) ([]string, error)) *MockQuerierListZonesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateRecord mocks base method.
func (m *MockQuerier) UpdateRecord(ctx context.Context, arg UpdateRecordParams) (CorednsRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", ctx, arg)
	ret0, _ := ret[0].(CorednsRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockQuerierMockRecorder) UpdateRecord(ctx, arg any) *MockQuerierUpdateRecordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockQuerier)(nil).UpdateRecord), ctx, arg)
	return &MockQuerierUpdateRecordCall{Call: call}
}

// MockQuerierUpdateRecordCall wrap *gomock.Call
type MockQuerierUpdateRecordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuerierUpdateRecordCall) Return(arg0 CorednsRecord, arg1 error) *MockQuerierUpdateRecordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuerierUpdateRecordCall) Do(f func(context.Context, UpdateRecordParams) (CorednsRecord, error)) *MockQuerierUpdateRecordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuerierUpdateRecordCall) DoAndReturn(f func(context.Context, UpdateRecordParams) (CorednsRecord, error)) *MockQuerierUpdateRecordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
